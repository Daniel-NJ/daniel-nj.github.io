---
layout:     post
title:      "计算机体系结构 第四章data-parallelism阅读记录"
subtitle:   "计算机体系结构 第四章"
date:       2022-06-11
author:     "Peng"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 读书笔记
    - Computer Architecture
    - 翻译
---


> #### 首先开头部分的一句引言很有趣，假如你要犁地，你是用两头强壮的公牛，还是选择用1024只鸡呢？

##### 本节主要围绕三种数据并行架构，vector、SIMD、GPU

 vector部分，以RV64V这个riscV架构来做介绍，vector架构主要核心部分包括vector registers，scaler registers, vector function uinits（数学逻辑运算单元，vector load/store, 

* 1)vector registers有若干读写口，通过crossbar连接到不同的vector function units。
* 2）RV64V的指令集采用suffix后缀来表示操作数的类型例如vsub.vv表示两个向量相减，类似vsub.vs 表示向量减去一个标量。其指令集没有区分操作的数据类型和大小，这些信息由寄存器来提供，因此在写代码的一开始，需要通过指令来配置寄存器的类型和位宽。
书中举了一个计算axpy的例子Y=aX+Y
分别对比了riscV和r64v架构的指令过程。 总结了r64v由如下的优势，1）指令带宽需求降低了很多，这是显而易见的，一条指令操作的数据比通用riscV要多若干倍了，2）另一个优势是pipeline inter-lock的机制不一样，通用riscV是前后有数据依赖的指令，后者每次都需要等待前者完成，但是r64v，后者只需等vector register中的第一个数据ready就可以启动了，这样能隐藏不少上一条指令的时间。
接着又举了一个dynamic register typing的例子，例如axpy中标量乘向量改成fp32， 然后向量相加仍然用fp64，只需要改一行配置寄存器类型的代码就可以了.....